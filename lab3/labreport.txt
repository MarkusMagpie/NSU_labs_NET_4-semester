Вопросы:
1 Что такое DNS и зачем он нужен?
    DNS (Domain Name System) - система, которая связывает между собой доменное имя сайта, то есть его название, и IP-адрес.
    DNS использует UDP протокол, порт сервера - 53. То есть DNS-запросы передаются через UDP на порт 53.

    Обобщение: люди получают доступ к информации онлайн через доменные имена, такие как google.com. 
        Веб-браузеры взаимодействуют с помощью IP-адресов. 
        DNS переводит доменные имена в IP-адреса, чтобы браузеры могли загружать интернет-ресурсы.
    https://www.cloudflare.com/learning/dns/what-is-dns/

    ? Зачем нужен ?  
    -   для определения IP адресов компьютеров по их доменному имени.
        Доменное имя - состоит из имени домена и далее всех имен доменов, в которые он входит, разделенных точками.
        Пример доменного имени: example.somedomain.ru.

2 Как DNS-сервер связывает доменные имена с IP-адресами?
    DNS-сервер - таблица соответствий вида «имя домена» — «IP-адрес».

    Когда вы вводите веб-адрес в браузере, он отправляет запрос на DNS-сервер для получения соответствующего IP-адреса. 
    DNS-серверы, расположенные по всему миру, работают совместно, обеспечивая быстрое и надежное преобразование доменных имен в IP-адреса.

    ​Процесс разрешения DNS-запроса состоит из восьми последовательных шагов:​
        1 инициирование запроса: юзер вводит «example.com» в веб-браузере. 
            Запрос отправляется в Интернет и поступает на рекурсивный DNS-резолвер.​
        2 обращение к корневому серверу: рекурсивный резолвер направляет запрос к корневому DNS-серверу (обозначается как «.»).​
        3 получение адреса TLD-сервера: корневой сервер отвечает резолверу, предоставляя адрес DNS-сервера домена верхнего уровня (TLD), 
            например, «.com» или «.net», который содержит информацию о соответствующих доменах. 
            В случае «example.com» запрос перенаправляется к TLD-серверу «.com».​
        4 запрос к TLD-серверу: рекурсивный резолвер отправляет запрос к DNS-серверу домена верхнего уровня «.com».​
        5 получение адреса авторитетного сервера: TLD-сервер отвечает, предоставляя IP-адрес авторитетного DNS-сервера для домена «example.com».​
        6 запрос к авторитетному серверу: рекурсивный резолвер направляет запрос к авторитетному DNS-серверу домена «example.com».​
        7 получение IP-адреса домена: авторитетный сервер отвечает резолверу, предоставляя IP-адрес для «example.com».​
        8 ответ браузеру: рекурсивный резолвер возвращает полученный IP-адрес веб-браузеру, который затем устанавливает 
            соединение с веб-сервером «example.com» для загрузки веб-страницы.
    https://www.cloudflare.com/learning/dns/what-is-dns/

3 Какие типы DNS-записей существуют?
    https://www.cloudflare.com/learning/dns/dns-records/

    A (Adress)- связывает доменное имя с IPv4-адресом
    АААА (IPv6 Adress) - связывает доменное имя с IPv6-адресом
    CNAME (Canonical Name) - используется для перенаправления на другое доменное имя, то есть позволяет нескольким именам ссылаться на один IP-адрес
    MX (Mail Exchange) - указывает почтовый сервер для данного домена (этот сервер - ответственный за прием электронной почты для домена)
    TXT (Text) - текстовая информация 
    NS (Name Server) - указывает DNS-серверы для домена

4 Как новый клиент в сети может обнаружить DNS-сервер?
    1) через DHCP протокол - при подключении к сети клиент автоматически получает IP-адрес, маску подсети, шлюз и адрес DNS-сервера
    2) вручную - пользователь может указать DNS-сервер в настройках ОС



Практика:
1 Разработка DNS-сервера - dns_server.cpp
    Реализуйте DNS-сервер, который будет хранить записи о доменных именах и соответствующих им IP-адресах.
    DNS-сервер должен поддерживать регистрацию новых доменных имён от клиентов (узлов).
    Реализуйте механизм разрешения доменных имён в IP-адреса (DNS-запросы и ответы).

    чтобы посмотреть какой процесс занимает порт: 
        sudo lsof -i :5353
    если есть процессы - завершить так:
        sudo kill -9 <PID>

    как запускать:
    0 терминал
        g++  dns_server.cpp -o dns_server
        ./dns_server
    1 терминал
        sudo wireshark
        udp.port = 5353
    2 терминал
        nc -u localhost 5353
        команда регистрации:
            REGISTER example.com 192.168.1.1
        запрос на разрешение домена:
            QUERY example.com

    разбор кода - смотри комменты:
        processRequest()
        createSocket()
        bindSocket()
            setsockopt
                int setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen);  


                https://www.opennet.ru/man.shtml?topic=setsockopt&category=2&russian=0

            bind(sockfd, (sockaddr*)&servAddr, sizeof(servAddr))
            bind - привязывает сокет к указанному адресу и порту
        runServer()
            recvfrom
                int recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, socklen_t *fromlen);

                https://www.opennet.ru/cgi-bin/opennet/man.cgi?topic=recvfrom&category=2

            sendto
                ssize_t sendto(int s, const void *msg, size_t len, int flags, const struct sockaddr *to, socklen_t tolen);

                https://www.opennet.ru/man.shtml?topic=sendto&category=2&russian=0
        main()

    логика программы:
        createSocket() - создаем UDP сокет
        bindSocket() - привязываем к порту 
        runServer() - бесконечный цикл:
            принимается UDP-сообщение от клиента - recvfrom(). оно записывается в буфер.
            Из полученной строки выделяется запрос, передаётся функции processRequest() для обработки.
        processRequest() - определяет тип запроса и формирует респонс
        runServer() - получил респонс и отправил - sendto() обратно клиенту по сокету



2 Модификация клиентских узлов
    Каждый клиентский узел должен быть хостом с уникальной HTML-страницей

3 Взаимодействие между узлами
    С любого узла в сети должна быть возможность получить HTML-страницу с другого узла, обратившись к нему по доменному имени.

4 Обнаружение DNS-сервера
    Реализуйте механизм, с помощью которого новый клиент может автоматически обнаружить DNS-сервер в сети.